# -*- coding: utf-8 -*-
"""Map_AQI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E82SMtw1vIdPfnLJUDB6V1vUZONgxR46
"""

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches # Import for legend
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import re
import io
import numpy as np
!pip install cartopy # Install the cartopy library for geographical plots
import cartopy

print("Libraries imported successfully.")

# 1. Your raw forecast data as a multi-line string
# This string contains the AQI forecast data parsed from a hypothetical source.
# Each block represents a day's forecast with city and AQI information.
forecast_text = """
--- Day +1 ---
        City: Delhi            |  Forecast: 138 AQI (Moderate)
        City: Brajrajnagar     |  Forecast: 124 AQI (Moderate)
        City: Gurugram         |  Forecast: 123 AQI (Moderate)

        --- Day +2 ---
        City: Brajrajnagar     |  Forecast: 147 AQI (Moderate)
        City: Gurugram         |  Forecast: 143 AQI (Moderate)
        City: Delhi            |  Forecast: 133 AQI (Moderate)
        City: Jorapokhar       |  Forecast: 121 AQI (Moderate)

        --- Day +3 ---
        City: Brajrajnagar     |  Forecast: 167 AQI (Moderate)
        City: Gurugram         |  Forecast: 159 AQI (Moderate)
        City: Delhi            |  Forecast: 150 AQI (Moderate)
        City: Jorapokhar       |  Forecast: 137 AQI (Moderate)

        --- Day +4 ---
        City: Brajrajnagar     |  Forecast: 142 AQI (Moderate)
        City: Joraphar       |  Forecast: 123 AQI (Moderate)
        City: Gurugram         |  Forecast: 123 AQI (Moderate)
        City: Delhi            |  Forecast: 117 AQI (Moderate)

        --- Day +5 ---
        City: Brajrajnagar     |  Forecast: 145 AQI (Moderate)
        City: Delhi            |  Forecast: 121 AQI (Moderate)
        City: Gurugram         |  Forecast: 120 AQI (Moderate)
        City: Jorapokhar       |  Forecast: 117 AQI (Moderate)

        --- Day +6 ---
        City: Delhi            |  Forecast: 144 AQI (Moderate)
        City: Brajrajnagar     |  Forecast: 130 AQI (Moderate)
        City: Jorapokhar       |  Forecast: 126 AQI (Moderate)
        City: Gurugram         |  Forecast: 124 AQI (Moderate)
        City: Talcher            |  Forecast: 118 AQI (Moderate)
        City: Lucknow          |  Forecast: 115 AQI (Moderate)

        --- Day +7 ---
        City: Brajrajnagar     |  Forecast: 142 AQI (Moderate)
        City: Jorapokhar       |  Forecast: 141 AQI (Moderate)
        City: Delhi            |  Forecast: 127 AQI (Moderate)
"""

# 2. City coordinates (Lat, Lon)
# A dictionary storing the geographical coordinates (latitude and longitude) for each city.
# These coordinates are crucial for plotting the cities on the map.
city_coordinates = {
    'Delhi': [28.6139, 77.2090],
    'Brajrajnagar': [20.8285, 83.9214],
    'Gurugram': [27.8, 78.0266],
    'Jorapokhar': [23.7070, 86.4126], # Approx. near Dhanbad, Jharkhand
    'Talcher': [21.9535, 85.2330],   # Odisha
    'Lucknow': [26.8467, 80.9462]    # Uttar Pradesh
}

# 3. Helper function to get AQI color
# This function determines the color and status label based on the AQI value.
# This is used to visually represent different AQI levels on the map.
def get_aqi_color(aqi):
    if aqi <= 50:
        return 'green', 'Good'
    elif aqi <= 100:
        return 'yellow', 'Satisfactory'
    elif aqi <= 200: # Changed from 150 to 200 to accommodate 'Moderate' in your data
        return 'orange', 'Moderate' # Your data contains Moderate up to 167
    elif aqi <= 300:
        return 'red', 'Poor'
    elif aqi <= 400:
        return 'purple', 'Very Poor'
    else:
        return 'maroon', 'Severe'

# 4. Parse the text data into a DataFrame
# This section processes the raw forecast text and extracts the relevant information
# (Day, City, AQI) into a pandas DataFrame.
# It also adds the corresponding latitude and longitude for each city using the city_coordinates dictionary.
data = []
current_day = ""
for line in io.StringIO(forecast_text):
    line = line.strip()
    if not line:
        continue

    day_match = re.match(r'--- (Day \+\d) ---', line)
    if day_match:
        current_day = day_match.group(1)
        continue

    city_match = re.match(r'City: (.*?) \|.*Forecast: (\d+) AQI', line)
    if city_match:
        city = city_match.group(1).strip()
        aqi = int(city_match.group(2))

        if city in city_coordinates:
            coords = city_coordinates[city]
            data.append([current_day, city, aqi, coords[0], coords[1]])
        else:
            print(f"Warning: Coordinates for '{city}' not found. Skipping.")

# Create the DataFrame from the parsed data
df = pd.DataFrame(data, columns=['Day', 'City', 'AQI', 'Lat', 'Lon'])
print("\nForecast data parsed successfully:")
print(df.head())

# 5. Loop through each day and create a map image
# This loop iterates through each unique day in the DataFrame to generate a separate map for each day's forecast.
days = df['Day'].unique()
for day in days:
    # Filter data for the current day
    day_data = df[df['Day'] == day]

    # Create a figure and a GeoAxes object
    plt.figure(figsize=(10, 10))
    # Use PlateCarree projection for simple lat/lon plotting
    ax = plt.axes(projection=ccrs.PlateCarree())
    # Set the extent of the map to focus on India
    ax.set_extent([68, 98, 8, 38], crs=ccrs.PlateCarree()) # Bounding box for India

    # Add features to the map - simplified for a "plain" map
    # Add coastlines
    ax.add_feature(cfeature.COASTLINE)
    # Add country borders with a dotted linestyle
    ax.add_feature(cfeature.BORDERS, linestyle=':') # Country borders
    # Add state borders with a dashed linestyle and gray color
    ax.add_feature(cfeature.STATES, linestyle='--', edgecolor='gray') # State borders (might not show for all regions/zooms)


    # Add gridlines and labels
    # Add latitude and longitude gridlines
    gl = ax.gridlines(crs=ccrs.PlateCarree(), draw_labels=True,
                      linewidth=0.5, color='gray', alpha=0.5, linestyle='--')
    # Disable labels on the top and right axes
    gl.top_labels = False
    gl.right_labels = False

    # Plot each city and add text label
    text_offsets = {} # To keep track of adjustments for text labels to avoid overlapping
    for index, row in day_data.iterrows():
        # Get color and status based on AQI value
        color, status = get_aqi_color(row['AQI'])
        # Plot the city as a marker on the map
        ax.plot(row['Lon'], row['Lat'],
                marker='o', markersize=10, color=color,
                linewidth=0.5,
                transform=ccrs.PlateCarree(),
                label=f"{row['City']}: {row['AQI']} ({status})") # Label for legend

        # Add text label next to the marker
        # Check for nearby cities and adjust text position to improve readability
        lon_offset = 0.5
        lat_offset = 0.1
        for city_name, (lat, lon) in city_coordinates.items():
            if city_name != row['City'] and np.isclose(lat, row['Lat'], atol=0.5) and np.isclose(lon, row['Lon'], atol=0.5):
                 # Simple adjustment for nearby cities
                 lon_offset += 1.0

        # Add the city name and AQI value as text next to the marker
        ax.text(row['Lon'] + lon_offset, row['Lat'] + lat_offset,
                f"{row['City']} ({row['AQI']})",
                color='black', fontsize=15, ha='left', va='center', # Increased font size for better visibility
                transform=ccrs.PlateCarree())


    # Create a custom legend for AQI categories
    # Define the color patches and their corresponding AQI ranges and status labels
    legend_patches = [
        mpatches.Patch(color='green', label='Good (0-50)'),
        mpatches.Patch(color='yellow', label='Satisfactory (51-100)'),
        mpatches.Patch(color='orange', label='Moderate (101-200)'),
        mpatches.Patch(color='red', label='Poor (201-300)'),
        mpatches.Patch(color='purple', label='Very Poor (301-400)'),
        mpatches.Patch(color='maroon', label='Severe (401+)')
    ]
    # Add the legend to the plot
    plt.legend(handles=legend_patches, loc='center right', bbox_to_anchor=(1, 0.20), fontsize=10)


    # Set the title of the map
    plt.title(f"AQI Forecast for {day}", fontsize=16)

    # Save the map to a PNG file
    # Generate a filename based on the day
    file_name = f"aqi_map_{day.replace(' ', '_').replace('+', '')}.png"
    plt.savefig(file_name, bbox_inches='tight', dpi=200)
    # Close the plot to free up memory
    plt.close()

    print(f"--- Map image created: {file_name} ---")

print("\nAll 7 map images have been generated. Check your folder for the .png files.")

